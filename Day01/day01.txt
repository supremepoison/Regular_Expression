正则表达式

    动机:
        1.文本处理已经称为计算机常见的工作之一
        2.对文本内容的搜索,定位,提取是逻辑比较复杂的工作
        3.为了快速方便的解决上述问题,产生了正则表达式技术

    定义:
        即文本的高级匹配模式,提供搜索,替换等功能.
        其本质是一系列由字符和特殊符号组成的字符串,这个字符串即正则表达式

    匹配原理:
        由普通字符和特殊符号构成,通过描述字符的重复,位置,种类等行为达到匹配某一类字符串的目的

    目标:
        1.熟练掌握正则表达式符号
        2.读懂常见的正则表达式,编写基本的搜索提取功能正则
        3.能够熟练使用re模块操作正则表达式

    正则表达式特点:
        1.方便文本处理
        2.支持语言众多
        3.使用灵活变化多样

    python------>re模块
        re.findall(pattern,string)
        功能:
            提取所有的正则匹配内容
        参数:
            pattern 正则表达式
            string  目标字符串
        返回值:
            列表,所有提取到的内容

元字符的使用:
    1.普通字符
        元字符:
            a B c 
        匹配规则:
            每个字符匹配对应的字符

            In [9]: re.findall('ab你','assab你s')
            Out[9]: ['ab你']
            * python 中正则表达式可以匹配汉子

    2.或
        元字符: |
        匹配规则:
            匹配 | 两侧任意一个正则表达式

            In [10]: re.findall('ab|cd','abcdefghijklmnopqrstuvwxyz')
            Out[10]: ['ab', 'cd']

    3.匹配单个字符串
        元字符: .
        匹配规则:
            匹配出换行外的任意字符

            In [21]: re.findall('J.','Jame Hello')
            Out[21]: ['Ja']


    4.匹配字符串开始位置
        元字符: ^
        匹配规则:
            匹配目标字符串的开始位置

            In [19]: re.findall('^Jame','Jame Hello')
            Out[19]: ['Jame']

    5.匹配日字符串的结束位置
        元字符: $
        匹配规则:
            匹配字符串的结尾位置

            In [22]: re.findall('Hello$','Jame Hello')
            Out[22]: ['Hello']

    6.匹配重复
        元字符: *
        匹配规则:
            匹配前面的字符重复 0次 或者 多次

            In [27]: re.findall('fo*','fosssfsssfweefooo')
            Out[27]: ['fo', 'f', 'f', 'fooo']

    7.匹配重复
        元字符: +
        匹配规则:
            匹配前面的字符出现 1次 或者 多次

            In [29]: re.findall('fo+','fosssfsssfweefooo')
            Out[29]: ['fo', 'fooo']

    8.匹配重复
        元字符: ?
        匹配规则:
            匹配前面的字符出现 0次 或 1次

            In [28]: re.findall('fo?','fosssfsssfweefooo')
            Out[28]: ['fo', 'f', 'f', 'fo']
    
    9.匹配重复
        元字符: {n}
        匹配规则:
            匹配重复制定的次数

            In [36]: re.findall('fo{3}','fosssfsssfweefooo')
            Out[36]: ['fooo']

    10.匹配重复
        元字符: {m,n}
        匹配规则:
            匹配前面的字符出现 m-n次

            In [41]: re.findall('fo{2,4}','fosssfoosssfooooweefooo')
            Out[41]: ['foo', 'foooo', 'fooo']

    11.匹配字符集
        元字符: [字符集]
        匹配规则:
            匹配字符集中任意 一个 字符
                [abc123] --> a b c 1 2 3
                [a-z] [A-Z] [0-9]
                [a-zA-Z]

            In [42]: re.findall('[a-zA-Z]{4}','this is a test ahhh')
            Out[42]: ['this', 'test', 'ahhh']

            In [53]: re.findall('[A-Z]+[a-z]*','This is a Test ahhh')
            Out[53]: ['This', 'Test']

            In [54]: re.findall('[0-9]+','10 + 9 = 19')
            Out[54]: ['10', '9', '19']
    
    12.匹配字符集
        元字符: [^ ...]
        匹配规则:
            匹配除了字符集中的任意一个字符
            [^abc] ---> 除了abc的任意一个字符

            In [60]: re.findall('[^ ]+','This is a Test ahhh')
            Out[60]: ['This', 'is', 'a', 'Test', 'ahhh']

    13.匹配日任意(非)数字
        元字符: \d \D
        匹配规则: 
            \d匹配任意数字字符  [0-9]
            \D匹配任意非数字字符  [^0-9]

            In [61]: re.findall('1\d{10}','121546456784544465')
            Out[61]: ['12154645678']

    14.匹配任意(非)普通字符
        元字符: \w \W 
        匹配规则:
            \w 匹配任意普通字符     [_0-9a-zA-Z]    也能匹配汉字
            \W 匹配任意非普通字符

            In [64]: re.findall('\w+','PORT#100345, Error 4%% down')
            Out[64]: ['PORT', '100345', 'Error', '4', 'down']

            In [65]: re.findall('\W+','PORT#100345, Error 4%% down')
            Out[65]: ['#', ', ', ' ', '%% ']

    15.匹配(非)空字符
        元字符: \s \S 
        匹配规则:
            \s 匹配任意空字符       [\r\n\t\v\f]
            \S 匹配任意非空字符

            In [72]: re.findall('\S+','hello world')
            Out[72]: ['hello', 'world']

    16.匹配字符串位置
        元字符:\A   \Z 
        匹配规则:
            \A 匹配字符串开头位置
            \Z 匹配字符串结尾位置
        
            In [4]: re.findall('\A\d+-\d+\Z','100-250')
            Out[4]: ['100-250']


    17.匹配单词边界
        元字符:\b \B  
        匹配规则:
            \b匹配单词边界位置 普通字符和非普通字符的交界
            \B匹配非单词边界

            In [5]: re.findall(r'\bis\b','This is a dog')
            Out[5]: ['is']

元字符总结
    匹配单个字符:
        . [a-zA-z0-9] [^ ...] \d \D \w \W \s \S  
    匹配重复
        * ? + {n} {m,n}  
    匹配位置
        ^ $ \A \Z \b \B
    其他:
        | () \

    正则表达式转义
        正则中的特殊符号:
            . * + ? ^ $ [] () | \
        在正则表达式中,如果需要匹配特殊符号 则需要加 \ 作为转义
        e.g.
            匹配 . ---> \.

            python字符串        正则           目标字符串
            '\\$\\d+'           \$\d+           $10

            raw字符串:  不对字符串内容进行转义处理
                '\\$\\d+'   ----> r'\$\d+'

贪婪 和 非贪婪 (greedy algorithm)

    贪婪模式:
        正则表达式的重复匹配默认总是尽可能向后匹配更多的内容
        * + ? {m,n}

    非贪婪(懒惰模式):
        尽可能减少的重复匹配内容

        In [30]: re.findall('ab+?','abbbbbbbbbbbccccc')
        Out[30]: ['ab']

正则表达式分组
    使用() 可以为正则表达式建立内部分组,子组为正则表达式的一部分,可以看作一个内部整体

    * 有子组的正则表达式仍然是整体取匹配内容,子组需在整体能够匹配到内容的前提下发挥作用

    子组的作用:
        1.作为内部整体可以改变某些元字符行为
            In [2]: re.search('(ab)+\d+','abababab1234').group()
            Out[2]: 'abababab1234'

            In [3]: re.search(r'\w+@\w+\.(cn|com)','nihao@qq.com').group()
            Out[3]: 'nihao@qq.com'

        2.子组在匹配到内容的情况下可以单独提取
            In [8]: re.search(r'(https|http|ftp)://\S+','http://www.baidu.com').group(1)
            Out[8]: 'http'

        子组注意事项:
            1.一个正则表达式可以有多个子组
            2.子组一般由外到内 由左到右即为第一第二子组
            3.子组不要重叠或者嵌套过多

        捕获组和非捕获组
            格式：
	            （?P<name>pattern）

                In [17]: re.search(r'(?P<nimei>ab)cd','abcdef').group()
                Out[17]: 'abcd'

            作用：
	            名字可以表达一定的含义，也可以通过名字获取子组内容

正则表达式设计原则
	1.正确性，能够正确的匹配出目标字符串
	2.排他性，除了要匹配的内容，尽可能不会匹配到其他内容
	3.全面性，尽可能对目标字串各种情况考虑全面，做到不遗漏


re模块
    regex = re.compile(pattern, flags=0)
        功能：
            生成正则表达式对象
        参数:
            pattern	正则表达式
            flags	功能标志位，丰富正则表达式的匹配功能
        返回值：
            正则表达式对象

    re.findall(pattern,string,flags=0)
        功能：
            从目标字符串提取所有正则匹配内容
        参数:
            pattern	正则
            string	目标字串
            flags	功能标志
        返回值：
            返回匹配到的内容列表
            如果正则表达式有子组则只获取子组中的内容

    regex.findall(string,pos,endpos)
        功能：
            从目标字符串提取所有正则匹配内容
        参数:
            string 	目标字串
            pos	    截取目标字符串起始位置
            endpos	截取目标字符串终止位置
        返回值：
            返回匹配到的内容列表
            如果正则表达式有子组则只获取子组中的内容

    re.split(pattern,string,flags)
        功能：
            使用正则表达式匹配部分切割目标字符串
        参数：
            pattern	正则表达式
            string	目标字串
            flags
        返回值：
            列表，切割后的部分

    re.sub(pattern,replaceStr,string,max,flags)
        功能：
            使用字符串替换正则匹配内容
        参数：
            pattern
            replaceStr		替换的字符串
            string		目标字符串
            max		最多替换几处,默认全部替换
        返回值：
            返回替换后的字符串

    re.subn(pattern,replaceStr,string,max,flags)
        功能：
            使用字符串替换正则匹配内容
        参数：
            pattern
            replaceStr		替换的字符串
            string		目标字符串
            max		最多替换几处,默认全部替换
        返回值：
            返回替换后的字符串

    re.finditer(pattern,string)
        功能：
            使用正则表达式匹配目标字符串
        参数：
            pattern	正则表达式
            string	目标字符串
        返回值：
            迭代对象 

    re.fullmatch（pattern,strings）
        功能：
            绝对匹配目标字符串
        参数：
            pattern	正则
            string	目标字符串
        返回值：
            match对象

    re.match（pattern,strings）
        功能：
            匹配目标字符串的开头位置
        参数：
            pattern	正则
            string	目标字符串
        返回值：
            match对象

    re.search（pattern,strings,flags）
        功能：
            匹配目标字符串的第一处匹配内容
        参数：
            pattern	正则
            string	目标字符串
            flags
        返回值：
            match对象

regex对象的属性
    pattern		代表的正则表达式
    flags		表示标志位常量值
    groups		代表有多少子组
    groupindex	生成捕获组名和对应第几组的键值对构成的字典

作业：
	熟记正则表达式元字符
	找一个文档，使用正则表达式
		1.匹配出其中的大写字母开头的单词
		2.匹配其中所有数字（包括整数，小数，负数，百分数，分数）

	使用regex对象调用函数复习函数使用
























